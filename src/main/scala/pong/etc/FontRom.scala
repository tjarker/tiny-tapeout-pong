package pong.etc

import chisel3._

object FontRom {
  val font = Seq(
    Seq(
      "00000000", // 0
      "00000000", // 1
      "01111100", // 2  *****
      "11000110", // 3 **   **
      "11000110", // 4 **   **
      "11001110", // 5 **  ***
      "11011110", // 6 ** ****
      "11110110", // 7 **** **
      "11100110", // 8 ***  **
      "11000110", // 9 **   **
      "11000110", // a **   **
      "01111100", // b  *****
      "00000000", // c
      "00000000", // d
      "00000000", // e
      "00000000" // f
    ),
    Seq(
      // code x31
      "00000000", // 0
      "00000000", // 1
      "00011000", // 2
      "00111000", // 3
      "01111000", // 4    **
      "00011000", // 5   ***
      "00011000", // 6  ****
      "00011000", // 7    **
      "00011000", // 8    **
      "00011000", // 9    **
      "00011000", // a    **
      "01111110", // b    **
      "00000000", // c    **
      "00000000", // d  ******
      "00000000", // e
      "00000000" // f
    ),
    Seq(
      // code x32
      "00000000", // 0
      "00000000", // 1
      "01111100", // 2  *****
      "11000110", // 3 **   **
      "00000110", // 4      **
      "00001100", // 5     **
      "00011000", // 6    **
      "00110000", // 7   **
      "01100000", // 8  **
      "11000000", // 9 **
      "11000110", // a **   **
      "11111110", // b *******
      "00000000", // c
      "00000000", // d
      "00000000", // e
      "00000000" // f
    ),
    Seq(
      // code x33
      "00000000", // 0
      "00000000", // 1
      "01111100", // 2  *****
      "11000110", // 3 **   **
      "00000110", // 4      **
      "00000110", // 5      **
      "00111100", // 6   ****
      "00000110", // 7      **
      "00000110", // 8      **
      "00000110", // 9      **
      "11000110", // a **   **
      "01111100", // b  *****
      "00000000", // c
      "00000000", // d
      "00000000", // e
      "00000000" // f
    ),
    Seq(
      // code x34
      "00000000", // 0
      "00000000", // 1
      "00001100", // 2     **
      "00011100", // 3    ***
      "00111100", // 4   ****
      "01101100", // 5  ** **
      "11001100", // 6 **  **
      "11111110", // 7 *******
      "00001100", // 8     **
      "00001100", // 9     **
      "00001100", // a     **
      "00011110", // b    ****
      "00000000", // c
      "00000000", // d
      "00000000", // e
      "00000000" // f
    ),
    Seq(
      // code x35
      "00000000", // 0
      "00000000", // 1
      "11111110", // 2 *******
      "11000000", // 3 **
      "11000000", // 4 **
      "11000000", // 5 **
      "11111100", // 6 ******
      "00000110", // 7      **
      "00000110", // 8      **
      "00000110", // 9      **
      "11000110", // a **   **
      "01111100", // b  *****
      "00000000", // c
      "00000000", // d
      "00000000", // e
      "00000000" // f
    ),
    Seq(
      // code x36
      "00000000", // 0
      "00000000", // 1
      "00111000", // 2   ***
      "01100000", // 3  **
      "11000000", // 4 **
      "11000000", // 5 **
      "11111100", // 6 ******
      "11000110", // 7 **   **
      "11000110", // 8 **   **
      "11000110", // 9 **   **
      "11000110", // a **   **
      "01111100", // b  *****
      "00000000", // c
      "00000000", // d
      "00000000", // e
      "00000000" // f
    ),
    Seq(
      // code x37
      "00000000", // 0
      "00000000", // 1
      "11111110", // 2 *******
      "11000110", // 3 **   **
      "00000110", // 4      **
      "00000110", // 5      **
      "00001100", // 6     **
      "00011000", // 7    **
      "00110000", // 8   **
      "00110000", // 9   **
      "00110000", // a   **
      "00110000", // b   **
      "00000000", // c
      "00000000", // d
      "00000000", // e
      "00000000" // f
    ),
    Seq(
      // code x38
      "00000000", // 0
      "00000000", // 1
      "01111100", // 2  *****
      "11000110", // 3 **   **
      "11000110", // 4 **   **
      "11000110", // 5 **   **
      "01111100", // 6  *****
      "11000110", // 7 **   **
      "11000110", // 8 **   **
      "11000110", // 9 **   **
      "11000110", // a **   **
      "01111100", // b  *****
      "00000000", // c
      "00000000", // d
      "00000000", // e
      "00000000" // f
    ),
    Seq(
      // code x39
      "00000000", // 0
      "00000000", // 1
      "01111100", // 2  *****
      "11000110", // 3 **   **
      "11000110", // 4 **   **
      "11000110", // 5 **   **
      "01111110", // 6  ******
      "00000110", // 7      **
      "00000110", // 8      **
      "00000110", // 9      **
      "00001100", // a     **
      "01111000", // b  ****
      "00000000", // c
      "00000000", // d
      "00000000", // e
      "00000000" // f
    ),
    Seq(
      "00000000", // 0
      "00000000", // 1
      "00000000", // 2
      "00000000", // 3
      "00000000", // 4
      "00000000", // 5
      "00000000", // 6
      "01111110", // 7  ******
      "00000000", // 8
      "00000000", // 9
      "00000000", // a
      "00000000", // b
      "00000000", // c
      "00000000", // d
      "00000000", // e
      "00000000" // f
    ),
    Seq(
      // code x3a
      "00000000", // 0
      "00000000", // 1
      "00000000", // 2
      "00000000", // 3
      "00011000", // 4    **
      "00011000", // 5    **
      "00000000", // 6
      "00000000", // 7
      "00000000", // 8
      "00011000", // 9    **
      "00011000", // a    **
      "00000000", // b
      "00000000", // c
      "00000000", // d
      "00000000", // e
      "00000000" // f
    ),
    Seq(
      "00000000", // 0
      "00000000", // 1
      "00000000", // 2
      "00000000", // 3
      "00000000", // 4
      "00000000", // 5
      "00000000", // 6
      "00000000", // 7
      "00000000", // 8
      "00000000", // 9
      "00000000", // a
      "00000000", // b
      "00000000", // c
      "00000000", // d
      "00000000", // e
      "00000000" // f
    )
  )

  val SPACE = 12
  val COLON = 11
  val HYPHEN = 10

  def apply(): Vec[Vec[UInt]] = {
    VecInit(font.map { char =>
      VecInit(char.map(r => ("b" + r.reverse).U(8.W)))
    })
  }
}
